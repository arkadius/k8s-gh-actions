name: Test k8s actions

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build image
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        id: buildx
      - uses: docker/build-push-action@v2
        with:
          context: sample-service
          builder: ${{ steps.buildx.outputs.name }}
          tags: arkadius/sample-service:1.0
          push: false
          load: true
      - uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: arkadius/sample-service:1.0

  test-k3d:
    needs: [ build ]
    runs-on: ubuntu-latest
    name: Test k3d
    steps:
      - uses: actions/checkout@v2
      - uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: arkadius/sample-service:1.0
      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "k3s-default"
          args: >-
            --agents 1
      - name: Import image
        run: k3d image import arkadius/sample-service:1.0
      - name: Test
        run: |
          set -ex
          kubectl apply -f kubectl-playground/sample-deployment.yaml
          kubectl wait --for=condition=available --timeout=120s deployment/sample-deployment
      - name: Show events
        if: failure()
        run: kubectl get events

  test-k3s:
    needs: [ build ]
    runs-on: ubuntu-latest
    name: Test k3s
    steps:
      - uses: actions/checkout@v2
      - uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: arkadius/sample-service:1.0
      - uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: 'v1.21.2-k3s1'
      - name: Import image
        run: |
          set -ex
          docker save --output sample-service-1.0.tar arkadius/sample-service:1.0
          docker cp sample-service-1.0.tar k3s-v1.21.2-k3s1:/tmp
          docker exec k3s-v1.21.2-k3s1 ctr images import /tmp/sample-service-1.0.tar
      - name: Test
        run: |
          set -ex
          kubectl apply -f kubectl-playground/sample-deployment.yaml
          kubectl wait --for=condition=available --timeout=120s deployment/sample-deployment
      - name: Show events
        if: failure()
        run: kubectl get events

#  test-microk8s:
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    name: Test MicroK8s
#    steps:
#      - uses: actions/checkout@v2
#      - uses: ishworkh/docker-image-artifact-download@v1
#        with:
#          image: arkadius/sample-service:1.0
#      - uses: balchua/microk8s-actions@v0.2.2
#        with:
#          channel: 'latest/stable'
#      - name: Import image
#        run: |
#          set -ex
#          docker save --output sample-service-1.0.tar arkadius/sample-service:1.0
#          sudo microk8s ctr image import sample-service-1.0.tar
#      - name: Test
#        run: |
#          set -ex
#          kubectl apply -f kubectl-playground/sample-deployment.yaml
#          kubectl wait --for=condition=available --timeout=120s deployment/sample-deployment
#      - name: Show events
#        if: failure()
#        run: kubectl get events
